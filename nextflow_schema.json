{
    "$schema": "https://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/eager/master/nextflow_schema.json",
    "title": "nf-core/eager pipeline parameters",
    "description": "A fully reproducible ancient and modern DNA pipeline in Nextflow and with cloud support.",
    "type": "object",
    "properties": {
        "Input/output options": {
            "type": "object",
            "properties": {
                "single_end": {
                    "type": "boolean",
                    "description": "Specifies that the input is single-end reads.",
                    "fa_icon": "fas fa-align-center",
                    "default": false,
                    "help_text": "By default, the pipeline expects paired-end data. If you have single-end data, specify this parameter on the command line when you launch the pipeline. It is not possible to run a mixture of single-end and paired-end files in one run."
                },
                "outdir": {
                    "type": "string",
                    "description": "The output directory where the results will be saved.",
                    "default": "./results",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "An email address to send a summary email to when the pipeline is completed.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            },
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data."
        },
        "Reference genome options": {
            "type": "object",
            "properties": {
                "genome": {
                    "type": "string",
                    "description": "Name of iGenomes reference.",
                    "fa_icon": "fas fa-book",
                    "help_text": "If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`."
                },
                "fasta": {
                    "type": "string",
                    "fa_icon": "fas fa-font",
                    "description": "Path to FASTA genome file.",
                    "help_text": "If you have no genome reference available, the pipeline can build one using a FASTA file. This requires additional time and resources, so it's better to use a pre-build index if possible."
                },
                "igenomes_base": {
                    "type": "string",
                    "description": "Directory / URL base for iGenomes references.",
                    "default": "s3://ngi-igenomes/igenomes/",
                    "fa_icon": "fas fa-cloud-download-alt",
                    "hidden": true,
                    "help_text": ""
                },
                "igenomes_ignore": {
                    "type": "boolean",
                    "description": "Do not load the iGenomes reference config.",
                    "fa_icon": "fas fa-ban",
                    "hidden": true,
                    "default": false,
                    "help_text": "Do not load `igenomes.config` when running the pipeline. You may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`."
                }
            },
            "fa_icon": "fas fa-dna",
            "description": "Options for the reference genome indices used to align reads."
        },
        "Generic options": {
            "type": "object",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "hidden": true,
                    "fa_icon": "fas fa-question-circle",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "Workflow name.",
                    "fa_icon": "fas fa-fingerprint",
                    "hidden": true,
                    "help_text": "A custom name for the pipeline run. Unlike the core nextflow `-name` option with one hyphen this parameter can be reused multiple times, for example if using `-resume`. Passed through to steps such as MultiQC and used for things like report filenames and titles."
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "hidden": true,
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully."
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true,
                    "default": false,
                    "help_text": ""
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true,
                    "help_text": ""
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true,
                    "default": false,
                    "help_text": ""
                },
                "multiqc_config": {
                    "type": "string",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true,
                    "help_text": ""
                },
                "tracedir": {
                    "type": "string",
                    "description": "Directory to keep pipeline Nextflow logs and reports.",
                    "default": "${params.outdir}/pipeline_info",
                    "fa_icon": "fas fa-cogs",
                    "hidden": true,
                    "help_text": ""
                }
            },
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`."
        },
        "Max job request options": {
            "type": "object",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested  for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            },
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details."
        },
        "Institutional config options": {
            "type": "object",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "hostnames": {
                    "type": "string",
                    "description": "Institutional configs hostname.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                }
            },
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline."
        },
        "input": {
            "type": "string",
            "default": "null"
        },
        "colour_chemistry": {
            "type": "integer",
            "default": 4
        },
        "single_stranded": {
            "type": "string"
        },
        "bam": {
            "type": "string"
        },
        "large_ref": {
            "type": "boolean",
            "default": false
        },
        "save_reference": {
            "type": "boolean",
            "default": false
        },
        "saveTrimmed": {
            "type": "boolean",
            "default": true
        },
        "saveAlignedIntermediates": {
            "type": "string"
        },
        "fasta_index": {
            "type": "string"
        },
        "bwa_index": {
            "type": "string"
        },
        "bt2_index": {
            "type": "string"
        },
        "snpcapture": {
            "type": "string"
        },
        "bedfile": {
            "type": "string"
        },
        "seq_dict": {
            "type": "string"
        },
        "skip_fastqc": {
            "type": "boolean",
            "default": false
        },
        "skip_preseq": {
            "type": "boolean",
            "default": false
        },
        "skip_damage_calculation": {
            "type": "boolean",
            "default": false
        },
        "skip_qualimap": {
            "type": "boolean",
            "default": false
        },
        "skip_deduplication": {
            "type": "boolean",
            "default": false
        },
        "run_convertinputbam": {
            "type": "boolean",
            "default": false
        },
        "skip_adapterremoval": {
            "type": "boolean",
            "default": false
        },
        "skip_trim": {
            "type": "boolean",
            "default": false
        },
        "complexity_filter_poly_g": {
            "type": "string"
        },
        "complexity_filter_poly_g_min": {
            "type": "integer",
            "default": 10
        },
        "trim_bam": {
            "type": "string"
        },
        "clip_forward_adaptor": {
            "type": "string",
            "default": "AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC"
        },
        "clip_reverse_adaptor": {
            "type": "string",
            "default": "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTA"
        },
        "clip_readlength": {
            "type": "integer",
            "default": 30
        },
        "clip_min_read_quality": {
            "type": "integer",
            "default": 20
        },
        "min_adap_overlap": {
            "type": "integer",
            "default": 1
        },
        "skip_collapse": {
            "type": "string"
        },
        "preserve5p": {
            "type": "string"
        },
        "mergedonly": {
            "type": "string"
        },
        "mapper": {
            "type": "string"
        },
        "bwaalnn": {
            "type": "number",
            "default": 0.04
        },
        "bwaalnk": {
            "type": "integer",
            "default": 2
        },
        "bwaalnl": {
            "type": "integer",
            "default": 1024
        },
        "circularextension": {
            "type": "integer",
            "default": 500
        },
        "circulartarget": {
            "type": "string",
            "default": "MT"
        },
        "circularfilter": {
            "type": "string"
        },
        "bt2_alignmode": {
            "type": "string",
            "default": "local"
        },
        "bt2_sensitivity": {
            "type": "string",
            "default": "sensitive"
        },
        "bt2_trim5": {
            "type": "integer",
            "default": 0
        },
        "bt2_trim3": {
            "type": "integer",
            "default": 0
        },
        "bt2n": {
            "type": "integer",
            "default": 0
        },
        "bt2l": {
            "type": "integer",
            "default": 0
        },
        "run_bam_filtering": {
            "type": "boolean",
            "default": false
        },
        "bam_discard_unmapped": {
            "type": "string"
        },
        "bam_unmapped_type": {
            "type": "string",
            "default": "discard"
        },
        "bam_mapping_quality_threshold": {
            "type": "integer",
            "default": 0
        },
        "damageprofiler_length": {
            "type": "integer",
            "default": 100
        },
        "damageprofiler_threshold": {
            "type": "integer",
            "default": 15
        },
        "damageprofiler_yaxis": {
            "type": "number",
            "default": 0.3
        },
        "dedupper": {
            "type": "string",
            "default": "dedup"
        },
        "dedup_all_merged": {
            "type": "string"
        },
        "preseq_step_size": {
            "type": "integer",
            "default": 1000
        },
        "run_bedtools_coverage": {
            "type": "string"
        },
        "anno_file": {
            "type": "string"
        },
        "run_pmdtools": {
            "type": "string"
        },
        "udg_type": {
            "type": "string",
            "default": "none"
        },
        "pmdtools_range": {
            "type": "integer",
            "default": 10
        },
        "pmdtools_threshold": {
            "type": "integer",
            "default": 3
        },
        "pmdtools_reference_mask": {
            "type": "string"
        },
        "pmdtools_max_reads": {
            "type": "integer",
            "default": 10000
        },
        "run_trim_bam": {
            "type": "boolean",
            "default": false
        },
        "bamutils_clip_left": {
            "type": "integer",
            "default": 1
        },
        "bamutils_clip_right": {
            "type": "integer",
            "default": 1
        },
        "bamutils_softclip": {
            "type": "string"
        },
        "strip_input_fastq": {
            "type": "boolean",
            "default": false
        },
        "strip_mode": {
            "type": "string",
            "default": "strip"
        },
        "run_genotyping": {
            "type": "boolean",
            "default": false
        },
        "genotyping_tool": {
            "type": "string"
        },
        "genotyping_source": {
            "type": "string",
            "default": "raw"
        },
        "gatk_ug_jar": {
            "type": "string"
        },
        "gatk_ug_genotype_model": {
            "type": "string",
            "default": "SNP"
        },
        "gatk_hc_emitrefconf": {
            "type": "string",
            "default": "GVCF"
        },
        "gatk_call_conf": {
            "type": "integer",
            "default": 30
        },
        "gatk_ploidy": {
            "type": "integer",
            "default": 2
        },
        "gatk_downsample": {
            "type": "integer",
            "default": 250
        },
        "gatk_ug_out_mode": {
            "type": "string",
            "default": "EMIT_VARIANTS_ONLY"
        },
        "gatk_hc_out_mode": {
            "type": "string",
            "default": "EMIT_VARIANTS_ONLY"
        },
        "gatk_ug_keep_realign_bam": {
            "type": "string"
        },
        "gatk_dbsnp": {
            "type": "string"
        },
        "gatk_ug_defaultbasequalities": {
            "type": "string"
        },
        "freebayes_C": {
            "type": "integer",
            "default": 1
        },
        "freebayes_g": {
            "type": "integer",
            "default": 0
        },
        "freebayes_p": {
            "type": "integer",
            "default": 2
        },
        "pileupcaller_snpfile": {
            "type": "string"
        },
        "pileupcaller_bedfile": {
            "type": "string"
        },
        "pileupcaller_method": {
            "type": "string",
            "default": "randomHaploid"
        },
        "run_vcf2genome": {
            "type": "boolean",
            "default": false
        },
        "vcf2genome_outfile": {
            "type": "string"
        },
        "vcf2genome_header": {
            "type": "string"
        },
        "vcf2genome_minc": {
            "type": "integer",
            "default": 5
        },
        "vcf2genome_minq": {
            "type": "integer",
            "default": 30
        },
        "vcf2genome_minfreq": {
            "type": "number",
            "default": 0.8
        },
        "run_multivcfanalyzer": {
            "type": "boolean",
            "default": false
        },
        "write_allele_frequencies": {
            "type": "boolean",
            "default": false
        },
        "min_genotype_quality": {
            "type": "integer",
            "default": 30
        },
        "min_base_coverage": {
            "type": "integer",
            "default": 5
        },
        "min_allele_freq_hom": {
            "type": "number",
            "default": 0.9
        },
        "min_allele_freq_het": {
            "type": "number",
            "default": 0.9
        },
        "additional_vcf_files": {
            "type": "string"
        },
        "reference_gff_annotations": {
            "type": "string",
            "default": "NA"
        },
        "reference_gff_exclude": {
            "type": "string",
            "default": "NA"
        },
        "snp_eff_results": {
            "type": "string",
            "default": "NA"
        },
        "run_mtnucratio": {
            "type": "boolean",
            "default": false
        },
        "mtnucratio_header": {
            "type": "string",
            "default": "MT"
        },
        "run_sexdeterrmine": {
            "type": "boolean",
            "default": false
        },
        "sexdeterrmine_bedfile": {
            "type": "string"
        },
        "run_nuclear_contamination": {
            "type": "boolean",
            "default": false
        },
        "contamination_chrom_name": {
            "type": "string",
            "default": "X"
        },
        "run_metagenomic_screening": {
            "type": "boolean",
            "default": false
        },
        "metagenomic_tool": {
            "type": "string",
            "default": "malt"
        },
        "metagenomic_min_support_reads": {
            "type": "integer",
            "default": 1
        },
        "database": {
            "type": "string"
        },
        "percent_identity": {
            "type": "integer",
            "default": 85
        },
        "malt_mode": {
            "type": "string",
            "default": "BlastN"
        },
        "malt_alignment_mode": {
            "type": "string",
            "default": "SemiGlobal"
        },
        "malt_top_percent": {
            "type": "integer",
            "default": 1
        },
        "malt_min_support_mode": {
            "type": "string",
            "default": "percent"
        },
        "malt_min_support_percent": {
            "type": "number",
            "default": 0.01
        },
        "malt_max_queries": {
            "type": "integer",
            "default": 100
        },
        "malt_memory_mode": {
            "type": "string",
            "default": "load"
        },
        "malt_weighted_lca": {
            "type": "string"
        },
        "run_maltextract": {
            "type": "boolean",
            "default": false
        },
        "maltextract_taxon_list": {
            "type": "string"
        },
        "maltextract_ncbifiles": {
            "type": "string"
        },
        "maltextract_filter": {
            "type": "string",
            "default": "def_anc"
        },
        "maltextract_toppercent": {
            "type": "number",
            "default": 0.01
        },
        "maltextract_destackingoff": {
            "type": "string"
        },
        "maltextract_downsamplingoff": {
            "type": "string"
        },
        "maltextract_duplicateremovaloff": {
            "type": "string"
        },
        "maltextract_matches": {
            "type": "string"
        },
        "maltextract_megansummary": {
            "type": "string"
        },
        "maltextract_percentidentity": {
            "type": "integer",
            "default": 85
        },
        "maltextract_topalignment": {
            "type": "string"
        },
        "maltextract_singlestranded": {
            "type": "string"
        },
        "awsqueue": {
            "type": "string"
        },
        "awsregion": {
            "type": "string",
            "default": "eu-west-1"
        }
    }
}