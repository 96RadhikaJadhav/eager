/*
 * -------------------------------------------------
 *  nfcore-EAGER2 Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  version = '2.0dev' // Pipeline version
  nf_required_version = '0.31.1' // Minimum version of nextflow required
  container = 'nfcore/eager:latest'

  //Pipeline options
  aligner = 'bwa'
  saveReference = false
  saveTrimmed = true
  saveAlignedIntermediates = false
  singleEnd = false
  reads = "data/*{1,2}.fastq.gz"
  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"

  // AWS Batch
  awsqueue = false
  awsregion = 'eu-west-1'



}

profiles {

  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }

  standard {
    includeConfig 'conf/base.config'
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  binac {
    includeConfig 'conf/base.config'
    includeconfig 'conf/binac.config'
  }
  cfc {
    includeConfig 'conf/base.config'
    includeconfig 'conf/cfc.config'
  }
  aws {
    includeConfig 'conf/base.config'
    includeConfig 'conf/aws.config'
    includeConfig 'conf/igenomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-EAGER2_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-EAGER2_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-EAGER2_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-EAGER2_dag.svg"
}

manifest {
  homePage = 'https://github.com/nf-core/eager'
  description = 'A fully reproducible and modern ancient DNA pipeline in Nextflow and with cloud support.'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
